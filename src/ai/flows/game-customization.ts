// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow to adjust the difficulty level of a game based on vocabulary level.
 *
 * - customizeGameDifficulty - A function that handles the game difficulty customization process.
 * - CustomizeGameDifficultyInput - The input type for the customizeGameDifficulty function.
 * - CustomizeGameDifficultyOutput - The return type for the customizeGameDifficulty function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CustomizeGameDifficultyInputSchema = z.object({
  documentText: z.string().describe('The text content of the uploaded document.'),
  gameType: z.string().describe('The type of game to customize (e.g., Wordscapes, Drops).'),
  desiredDifficulty: z
    .enum(['easy', 'medium', 'hard'])
    .describe('The desired difficulty level for the game.'),
});
export type CustomizeGameDifficultyInput = z.infer<
  typeof CustomizeGameDifficultyInputSchema
>;

const WordscapesRoundSchema = z.object({
    letters: z.array(z.string()).min(5).max(7).describe('An array of 5-7 letters for the user to form words from.'),
    mainWords: z.array(z.string()).describe('A list of primary words (3+ letters) for the user to find, which will be displayed in the grid.'),
    bonusWords: z.array(z.string()).describe('An additional list of valid words (3+ letters) that can be formed but are not in the main grid.'),
});

const SimpleGameRoundSchema = z.object({
  word: z.string().describe('The correct word for the round.'),
  scrambled: z.string().describe('The scrambled/jumbled version of the word to show the user.'),
  displayPrompt: z.string().describe('The prompt to show the user for this round (e.g., "Unscramble the word").')
});

const CustomizeGameDifficultyOutputSchema = z.object({
    gameTitle: z.string().describe('The title for this specific game session.'),
    gameType: z.string().describe('The type of game being played, to be passed to the client.'),
    gameData: z.union([WordscapesRoundSchema, z.array(SimpleGameRoundSchema)]).describe('The customized data for the game. The structure depends on the gameType.'),
});

export type CustomizeGameDifficultyOutput = z.infer<
  typeof CustomizeGameDifficultyOutputSchema
>;

export async function customizeGameDifficulty(
  input: CustomizeGameDifficultyInput
): Promise<CustomizeGameDifficultyOutput> {
  return customizeGameDifficultyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'customizeGameDifficultyPrompt',
  input: {schema: CustomizeGameDifficultyInputSchema},
  output: {schema: CustomizeGameDifficultyOutputSchema},
  prompt: `You are a brilliant game designer specializing in creating educational word games. Your task is to generate a customized game level based on a user's uploaded document and selected game type.

Document Text: {{{documentText}}}
Game Type: {{{gameType}}}
Desired Difficulty: {{{desiredDifficulty}}}

Generate a creative and relevant title for this game session.

Based on the game type, prepare the 'gameData':

**If the game is 'Wordscapes', 'Word Cookies', or 'Spelling Bee (NYT)':**
1.  **Extract Key Words:** Analyze the document text to identify 10-15 key vocabulary words that match the 'desiredDifficulty'.
2.  **Select Base Word:** Choose the longest and most interesting word from the extracted list to be the source for the letter wheel. This word should have 5-7 unique letters. If no single word works, create a compelling set of 5-7 letters based on the document's themes.
3.  **Generate Word List:** From the chosen 5-7 letters, find ALL possible valid English words of 3 or more letters.
4.  **Create Game Level:**
    *   **letters**: An array of the 5-7 letters for the wheel.
    *   **mainWords**: Select 5-8 of the most relevant or common words from the generated list. These will be the words the user needs to find to complete the level.
    *   **bonusWords**: All other valid words from the generated list become bonus words.
5.  The 'gameData' field should be a single object matching the 'WordscapesRoundSchema'.

**If the game is anything else (e.g., 'Drops', 'Elevate'):**
1.  **Analyze and Extract:** Analyze the document to extract a list of 10 key vocabulary words suitable for the desired difficulty.
2.  **Create Scrambled Words:** For each word, create a 'scrambled' version by jumbling its letters.
3.  The 'gameData' field should be an array of 10 objects, each matching the 'SimpleGameRoundSchema', with a 'displayPrompt' of "Unscramble the letters to find the word."

Set the 'gameType' in the output to be the same as the input 'gameType'. This is crucial for the client to render the correct UI.`,
});

const customizeGameDifficultyFlow = ai.defineFlow(
  {
    name: 'customizeGameDifficultyFlow',
    inputSchema: CustomizeGameDifficultyInputSchema,
    outputSchema: CustomizeGameDifficultyOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
